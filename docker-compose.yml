x-variables:
  image-name: &image-name etf-matcher:latest

x-base-service: &base-service
  image: *image-name
  build:
    context: .
    dockerfile: Dockerfile
    args:
      UID: ${UID}
      GID: ${GID}
  environment:
    - FORCE_COLOR=1
  user: "${UID}:${GID}" # Use the local user UID and GID

services:
  # Generate a production build
  #   Command: "docker compose build build-dist && docker compose up build-dist"
  #
  build-dist:
    <<: *base-service
    # TODO: Only mount `dist`
    volumes:
      - .:/app
    command: |
      sh -c '
      cp -rT /build_artifacts/public/pkg /app/public/pkg &&
      cp -rT /build_artifacts/public/data /app/public/data &&
      npm install &&
      npm run build
      '
    profiles:
      # Don't run by default
      - production-build

  # --- The following is used for development environments

  dev:
    <<: *base-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    entrypoint: ["/usr/bin/tini", "--"]
    command: |
      sh -c '
      if [ ! -d "/app/public/pkg" ]; then
        cp -rT /build_artifacts/public/pkg /app/public/pkg;
      fi &&
      if [ ! -d "/app/public/data" ]; then
        cp -rT /build_artifacts/public/data /app/public/data;
      fi &&
      npm install &&
      npm run dev
      '
    environment:
      - RUST_BACKTRACE=1

  # Used for Rust auto-refresh (not quite HMR, but close)
  dev-rust-hmr:
    <<: *base-service
    depends_on:
      - dev
    volumes:
      - .:/app
    # Note: The convoluted code in here skips copying over backend files
    # that already exist
    command: |
      sh -c '
      find /build_artifacts/backend -type f | while read file; do
        dest="/app/backend/$${file#/build_artifacts/backend/}"
        if [ ! -e "$$dest" ]; then
          mkdir -p "$$(dirname "$$dest")"
          cp "$$file" "$$dest"
        fi
      done &&
      find /build_artifacts/backend -type d | while read dir; do
        dest="/app/backend/$${dir#/build_artifacts/backend/}"
        if [ ! -d "$$dest" ]; then
          mkdir -p "$$dest"
        fi
      done &&
      ./docker_build_helpers/inotify_rust.sh
      '
    environment:
      - RUST_BACKTRACE=1

  dev-import:
    <<: *base-service
    volumes:
      - .:/app
    command: "import_datapacks"
    profiles:
      # Don't run by default
      - import

  dev-build-rust:
    <<: *base-service
    volumes:
      - .:/app
    command: "build_rust_frontend"
    profiles:
      # Don't run by default
      - build_rust_frontend

  dev-test:
    <<: *base-service
    volumes:
      - .:/app
    command: |
      sh -c '
      cp -rT /build_artifacts/public/pkg /app/public/pkg &&
      cp -rT /build_artifacts/public/data /app/public/data &&
      npm install &&
      npm run test:ci
      '
    environment:
      - RUST_BACKTRACE=1
    profiles:
      # Don't run by default
      - test
