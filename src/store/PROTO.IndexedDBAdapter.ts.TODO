import StatePersistenceAdapter from "./PROTO.StatePersistenceAdapter";

// TODO: Refactor
interface IndexedDBService<T> {
  getItem<K extends keyof T>(key: K): Promise<T[K] | undefined>;
  setItem<K extends keyof T>(key: K, value: T[K]): Promise<void>;
  getAllKeys(): Promise<(keyof T)[]>;
  removeItem<K extends keyof T>(key: K): Promise<void>;
}

export default class IndexedDBAdapter<T> implements StatePersistenceAdapter<T> {
  private _IndexedDBService: IndexedDBService<T>;

  constructor(IndexedDBService: IndexedDBService<T>) {
    this._IndexedDBService = IndexedDBService;
  }

  async ready(): Promise<void> {
    // Implementation for ready
  }

  async getAllKeys(): Promise<(keyof T)[]> {
    return this._IndexedDBService.getAllKeys();
  }

  async getItem<K extends keyof T>(key: K): Promise<T[K] | undefined> {
    return this._IndexedDBService.getItem(key);
  }

  async setItem<K extends keyof T>(key: K, value: T[K]): Promise<void> {
    return this._IndexedDBService.setItem(key, value);
  }

  async removeItem<K extends keyof T>(key: K): Promise<void> {
    return this._IndexedDBService.removeItem(key);
  }

  async clear(): Promise<void> {
    // Implementation for clear
  }
}
