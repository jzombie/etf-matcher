// automatically generated by the FlatBuffers compiler, do not modify


// @generated

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod financial_vectors {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ten_k {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TickerVectorOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TickerVector<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TickerVector<'a> {
  type Inner = TickerVector<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TickerVector<'a> {
  pub const VT_TICKER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_VECTOR: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TickerVector { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TickerVectorArgs<'args>
  ) -> flatbuffers::WIPOffset<TickerVector<'bldr>> {
    let mut builder = TickerVectorBuilder::new(_fbb);
    if let Some(x) = args.vector { builder.add_vector(x); }
    builder.add_ticker_id(args.ticker_id);
    builder.finish()
  }


  #[inline]
  pub fn ticker_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TickerVector::VT_TICKER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn vector(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(TickerVector::VT_VECTOR, None)}
  }
}

impl flatbuffers::Verifiable for TickerVector<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("ticker_id", Self::VT_TICKER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("vector", Self::VT_VECTOR, false)?
     .finish();
    Ok(())
  }
}
pub struct TickerVectorArgs<'a> {
    pub ticker_id: i32,
    pub vector: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
}
impl<'a> Default for TickerVectorArgs<'a> {
  #[inline]
  fn default() -> Self {
    TickerVectorArgs {
      ticker_id: 0,
      vector: None,
    }
  }
}

pub struct TickerVectorBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TickerVectorBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ticker_id(&mut self, ticker_id: i32) {
    self.fbb_.push_slot::<i32>(TickerVector::VT_TICKER_ID, ticker_id, 0);
  }
  #[inline]
  pub fn add_vector(&mut self, vector: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TickerVector::VT_VECTOR, vector);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TickerVectorBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TickerVectorBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TickerVector<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TickerVector<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TickerVector");
      ds.field("ticker_id", &self.ticker_id());
      ds.field("vector", &self.vector());
      ds.finish()
  }
}
pub enum TickerVectorsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TickerVectors<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TickerVectors<'a> {
  type Inner = TickerVectors<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TickerVectors<'a> {
  pub const VT_VECTORS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TickerVectors { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TickerVectorsArgs<'args>
  ) -> flatbuffers::WIPOffset<TickerVectors<'bldr>> {
    let mut builder = TickerVectorsBuilder::new(_fbb);
    if let Some(x) = args.vectors { builder.add_vectors(x); }
    builder.finish()
  }


  #[inline]
  pub fn vectors(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TickerVector<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TickerVector>>>>(TickerVectors::VT_VECTORS, None)}
  }
}

impl flatbuffers::Verifiable for TickerVectors<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TickerVector>>>>("vectors", Self::VT_VECTORS, false)?
     .finish();
    Ok(())
  }
}
pub struct TickerVectorsArgs<'a> {
    pub vectors: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TickerVector<'a>>>>>,
}
impl<'a> Default for TickerVectorsArgs<'a> {
  #[inline]
  fn default() -> Self {
    TickerVectorsArgs {
      vectors: None,
    }
  }
}

pub struct TickerVectorsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TickerVectorsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_vectors(&mut self, vectors: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TickerVector<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TickerVectors::VT_VECTORS, vectors);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TickerVectorsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TickerVectorsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TickerVectors<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TickerVectors<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TickerVectors");
      ds.field("vectors", &self.vectors());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TickerVectors`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ticker_vectors_unchecked`.
pub fn root_as_ticker_vectors(buf: &[u8]) -> Result<TickerVectors, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TickerVectors>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TickerVectors` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_ticker_vectors_unchecked`.
pub fn size_prefixed_root_as_ticker_vectors(buf: &[u8]) -> Result<TickerVectors, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TickerVectors>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TickerVectors` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ticker_vectors_unchecked`.
pub fn root_as_ticker_vectors_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TickerVectors<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TickerVectors<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TickerVectors` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ticker_vectors_unchecked`.
pub fn size_prefixed_root_as_ticker_vectors_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TickerVectors<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TickerVectors<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TickerVectors and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TickerVectors`.
pub unsafe fn root_as_ticker_vectors_unchecked(buf: &[u8]) -> TickerVectors {
  flatbuffers::root_unchecked::<TickerVectors>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TickerVectors and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TickerVectors`.
pub unsafe fn size_prefixed_root_as_ticker_vectors_unchecked(buf: &[u8]) -> TickerVectors {
  flatbuffers::size_prefixed_root_unchecked::<TickerVectors>(buf)
}
#[inline]
pub fn finish_ticker_vectors_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<TickerVectors<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_ticker_vectors_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<TickerVectors<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod TenK
}  // pub mod FinancialVectors

